// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should handle Omit type 1`] = `
"declare type A = Omit<
  {
    a: string,
    b: number,
  },
  "a",
>;
declare type B = Omit<
  {
    a: string,
    b: number,
  },
  "a" | "b",
>;
declare type O = {
  a: string,
  b: number,
};
declare type U = "a";
declare type C = Omit<O, U>;
"
`;

exports[`should handle utility types 1`] = `
"declare type A = $ReadOnly<{
  a: number,
}>;
declare type B = Partial<{
  a: number,
}>;
declare type C = $NonMaybeType<string | null>;
declare type D = $ReadOnlyArray<string>;
declare type E = ReturnType<() => string>;
declare type F = Record<string, number>;
declare type G = $ReadOnlySet<number>;
declare type H = $ReadOnlyMap<string, number>;
declare type A1<Readonly> = Readonly;
declare type B1<Partial> = Partial;
declare type C1<NonNullable> = NonNullable;
declare type D1<ReadonlyArray> = ReadonlyArray;
declare type E1<ReturnType> = ReturnType;
declare type F1<Record> = Record;
declare type A2<T> = $ReadOnly<T>;
declare type B2<T> = Partial<T>;
declare type C2<T> = $NonMaybeType<T>;
declare type D2<T> = $ReadOnlyArray<T>;
declare type E2<T> = ReturnType<() => T>;
declare type F2<T, U> = Record<T, U>;
"
`;
