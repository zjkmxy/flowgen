// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should approximate unsupported keys 1`] = `
"declare type A = {
  [typeof Foo]: (() => any) | void,
  +[typeof Foo]: (() => any) | void,
  [typeof Foo]: () => any,
  +[typeof Foo]: () => any,
  [typeof Foo]: any | void,
  +[typeof Foo]: any | void,
  [typeof Foo]: any,
  +[typeof Foo]: any,
};
declare class B {
  [typeof Foo]: (() => any) | void;
  +[typeof Foo]: (() => any) | void;
  [typeof Foo]: () => any;
  +[typeof Foo]: () => any;
  [typeof Foo]: any | void;
  +[typeof Foo]: any | void;
  [typeof Foo]: any;
  +[typeof Foo]: any;
}
declare interface C {
  [typeof Foo]: (() => any) | void;
  +[typeof Foo]: (() => any) | void;
  [typeof Foo]: () => any;
  +[typeof Foo]: () => any;
  [typeof Foo]: any | void;
  +[typeof Foo]: any | void;
  [typeof Foo]: any;
  +[typeof Foo]: any;
}
"
`;

exports[`should handle computed Symbol.iterator and Symbol.asyncIterator 1`] = `
"declare type A = {
  @@asyncIterator: (() => any) | void,
  @@iterator: (() => any) | void,
  +@@asyncIterator: (() => any) | void,
  +@@iterator: (() => any) | void,
  @@asyncIterator: () => any,
  @@iterator: () => any,
  +@@asyncIterator: () => any,
  +@@iterator: () => any,
  @@asyncIterator: any | void,
  @@iterator: any | void,
  +@@asyncIterator: any | void,
  +@@iterator: any | void,
  @@asyncIterator: any,
  @@iterator: any,
  +@@asyncIterator: any,
  +@@iterator: any,
};
declare class B {
  @@asyncIterator: (() => any) | void;
  @@iterator: (() => any) | void;
  +@@asyncIterator: (() => any) | void;
  +@@iterator: (() => any) | void;
  @@asyncIterator: () => any;
  @@iterator: () => any;
  +@@asyncIterator: () => any;
  +@@iterator: () => any;
  @@asyncIterator: any | void;
  @@iterator: any | void;
  +@@asyncIterator: any | void;
  +@@iterator: any | void;
  @@asyncIterator: any;
  @@iterator: any;
  +@@asyncIterator: any;
  +@@iterator: any;
}
declare interface C {
  @@asyncIterator: (() => any) | void;
  @@iterator: (() => any) | void;
  +@@asyncIterator: (() => any) | void;
  +@@iterator: (() => any) | void;
  @@asyncIterator: () => any;
  @@iterator: () => any;
  +@@asyncIterator: () => any;
  +@@iterator: () => any;
  @@asyncIterator: any | void;
  @@iterator: any | void;
  +@@asyncIterator: any | void;
  +@@iterator: any | void;
  @@asyncIterator: any;
  @@iterator: any;
  +@@asyncIterator: any;
  +@@iterator: any;
}
"
`;

exports[`should handle string literals 1`] = `
"declare type A = {
  foo: (() => any) | void,
  +foo: (() => any) | void,
  foo: () => any,
  +foo: () => any,
  foo: any | void,
  +foo: any | void,
  foo: any,
  +foo: any,
};
declare class B {
  foo: (() => any) | void;
  +foo: (() => any) | void;
  foo: () => any;
  +foo: () => any;
  foo: any | void;
  +foo: any | void;
  foo: any;
  +foo: any;
}
declare interface C {
  foo: (() => any) | void;
  +foo: (() => any) | void;
  foo: () => any;
  +foo: () => any;
  foo: any | void;
  +foo: any | void;
  foo: any;
  +foo: any;
}
"
`;
