// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should handle exported interfaces and types 1`] = `
"declare namespace Example {
  declare export interface StoreModel<S> {}
}
"
`;

exports[`should handle global augmentation 1`] = `
"declare module "global" {
  declare interface Array<T> {}
}
"
`;

exports[`should handle import equals declaration 1`] = `
"declare namespace A {
  declare export type B = string;
}

declare type hello = A.B;
"
`;

exports[`should handle merging with other types class 1`] = `
"declare class Album {
  label: Album.AlbumLabel;
  static AlbumLabel: typeof Album.AlbumLabel;
}

declare export class AlbumLabel {}
"
`;

exports[`should handle merging with other types enum 1`] = `
"declare enum Color {
  Red = 1, // 1
  Green = 2, // 2
  Blue = 4, // 4
}

declare namespace Color {
  declare export function mixColor(colorName: string): number;
}
"
`;

exports[`should handle merging with other types function const 1`] = `
"declare namespace test {
  declare export var ok: number;
}
"
`;

exports[`should handle merging with other types function interface 1`] = `
"declare namespace test {
  declare export interface Foo {
    bar: number;
  }
}
"
`;

exports[`should handle merging with other types function type 1`] = `
"declare namespace test {
  declare export type Foo = {
    bar: number,
  };
}
"
`;

exports[`should handle namespace function merging 1`] = `
"declare namespace test {
  declare function test(err: number): void;

  declare function test(response: string): string;
}
"
`;

exports[`should handle namespace merging 1`] = `
"declare namespace test {
  declare export var test.ok: number;
  declare export var test.error: string;
}
"
`;

exports[`should handle namespaces 1`] = `
"declare namespace test {
  declare export var test.ok: number;
}
"
`;

exports[`should handle nested namespace merging class 1`] = `
"declare namespace ns {
  declare class Album {
    label: ns.Album.AlbumLabel;
    static AlbumLabel: typeof Album.AlbumLabel;
  }

  declare export class AlbumLabel {}
}
"
`;

exports[`should handle nested namespace merging enum 1`] = `
"declare namespace ns {
  declare enum Color {
    Red = 1, // 1
    Green = 2, // 2
    Blue = 4, // 4
  }

  declare namespace Color {
    declare export function mixColor(colorName: string): number;
  }
}
"
`;

exports[`should handle nested namespace merging function const 1`] = `
"declare namespace ns {
  declare namespace test {
    declare export var test.ok: number;
  }
}
"
`;

exports[`should handle nested namespace merging function interface 1`] = `
"declare namespace ns {
  declare namespace test {
    declare export interface Foo {
      bar: number;
    }
  }
}
"
`;

exports[`should handle nested namespace merging function type 1`] = `
"declare namespace ns {
  declare namespace test {
    declare export type Foo = {
      bar: number,
    };
  }
}
"
`;

exports[`should handle nested namespaces 1`] = `
"import * as external from "external";

declare namespace E0 {
  declare type A = external.type;

  declare namespace U1 {
    declare interface S3 {
      a: string;
      b: string;
    }
    declare var E0.U1.e2: number;

    declare enum E2 {
      E = 1, // 1
    }

    declare namespace D1 {
      declare namespace S2 {
        declare interface S3 {
          b: string;
        }
        declare var E0.U1.D1.S2.n3: Symbol;
        declare class N3 {}
      }
    }

    declare namespace DD1 {
      declare namespace S2 {
        declare interface S3 {
          e: number;
        }
      }
    }
  }

  declare namespace S1 {
    declare var E0.S1.m3: string;
  }

  declare var E0.s1: string;
}
"
`;

exports[`should handle qualified namespaces 1`] = `
"declare namespace A {
  declare namespace B {
    declare interface S<A> {
      +d: A;
      b: number;
    }
    declare class D<S> {}

    declare namespace C {
      declare class N<A> mixins A.B.D<A> implements A.B.S<A> {
        a: string;
      }
    }
  }
}
"
`;
